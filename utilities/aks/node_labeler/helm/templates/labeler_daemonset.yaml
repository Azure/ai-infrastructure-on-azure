apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-labeler-sa
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-labeler-role
rules:
- apiGroups: [""] # Core API group
  resources: ["nodes"]
  verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-labeler-rolebinding
subjects:
- kind: ServiceAccount
  name: node-labeler-sa
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: node-labeler-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: kube-system
  name: node-labeler
spec:
  selector:
    matchLabels:
      app: node-labeler
  template:
    metadata:
      labels:
        app: node-labeler
    spec:
      serviceAccountName: node-labeler-sa
      containers:
      - name: labeler
        image: mcr.microsoft.com/cbl-mariner/busybox:1.35
        command: ["sh", "-c", "echo 'Task completed' && sleep infinity"]
      initContainers:
      - name: torset-discovery
        image: mcr.microsoft.com/aznhc/aznhc-nv:1.2.0
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_RESOURCE
        volumeMounts:
        - name: dev-infiniband
          mountPath: /dev/infiniband
        - name: workdir
          mountPath: /work
        command: ["/bin/bash", "-lc"]
        args:
        - |
          ulimit -l unlimited
          set -euo pipefail

          # Skip if no RDMA devices present
          if [ ! -d /dev/infiniband ]; then
            echo "No RDMA devices found; skipping torset discovery."
            exit 0
          fi

          # Collect all HCAs' GUIDs - fail gracefully if ibstatus fails
          if ! command -v ibstatus >/dev/null 2>&1; then
            echo "ibstatus not available; skipping torset discovery."
            exit 0
          fi

          if ! guids=$(ibstatus 2>/dev/null | awk '/Infiniband device/ {dev=$3} /link_layer:/ && $2=="InfiniBand" {gsub(/'\''/,"",dev); print dev}' \
              | xargs -I% ibstat "%" 2>/dev/null \
              | grep "Port GUID" | awk -F: '{print $2}' | sed 's/^0x00/0x/'); then
            echo "Failed to collect HCA GUIDs; skipping torset discovery."
            exit 0
          fi

          if [ -z "$guids" ]; then
            echo "No InfiniBand GUIDs found; skipping torset discovery."
            exit 0
          fi

          guid_file=/work/guids.txt
          echo "$guids" > "$guid_file"

          topo_file=/work/topology.txt
          # Try SHARP topology discovery - fail gracefully if SHARP AM is not available
          echo "Attempting SHARP topology discovery..."
          
          # Temporarily disable exit on error for this command
          set +e
          SHARP_SMX_UCX_INTERFACE=mlx5_0:1 \
              /opt/mellanox/sharp/bin/sharp_cmd topology \
              --ib-dev mlx5_0:1 \
              --guids_file "$guid_file" \
              --topology_file "$topo_file" 2>/dev/null
          sharp_exit_code=$?
          set -e
          
          if [ $sharp_exit_code -ne 0 ]; then
            echo "SHARP topology discovery failed (SHARP AM may not be available); skipping torset labeling."
            exit 0
          fi

          # Parse torset from topology
          if [ -f "$topo_file" ] && [ -s "$topo_file" ]; then
            echo "Processing topology file for torset discovery..."
            if leafs=$(grep "Nodes=" "$topo_file" 2>/dev/null | awk '{print $1}' | cut -d= -f2) && [ -n "$leafs" ]; then
              
              declare -A parent_counts
              while read -r line; do
                if sw_name=$(echo "$line" | awk '{print $1}' | cut -d= -f2 2>/dev/null) && [ -n "$sw_name" ]; then
                  if switches_field=$(echo "$line" | grep "Switches=" | awk '{print $2}' | cut -d= -f2 2>/dev/null); then
                    IFS=',' read -ra switches <<< "$switches_field"
                    for leaf in $leafs; do
                      for s in "${switches[@]}"; do
                        if [[ "$s" == "$leaf" ]]; then
                          parent_counts["$sw_name"]=1
                        fi
                      done
                    done
                  fi
                fi
              done < <(grep "Switches=" "$topo_file" 2>/dev/null || true)

              declare -A torset_candidates
              for parent in "${!parent_counts[@]}"; do
                while read -r line; do
                  if sw_name=$(echo "$line" | awk '{print $1}' | cut -d= -f2 2>/dev/null) && [ -n "$sw_name" ]; then
                    if switches_field=$(echo "$line" | grep "Switches=" | awk '{print $2}' | cut -d= -f2 2>/dev/null || echo ""); then
                      IFS=',' read -ra switches <<< "$switches_field"
                      for p in "${switches[@]}"; do
                        if [[ "$p" == "$parent" ]]; then
                          torset_candidates["$sw_name"]=1
                        fi
                      done
                    fi
                  fi
                done < <(grep "Switches=" "$topo_file" 2>/dev/null || true)
              done

              if [ ${#torset_candidates[@]} -gt 0 ]; then
                torset=$(printf "%s\n" "${!torset_candidates[@]}" | head -n1)
                echo "Found torset: $torset"
                echo -n "$torset" > /work/torset
              else
                echo "No torset candidates found in topology"
              fi
            else
              echo "No leaf nodes found in topology file"
            fi
          else
            echo "No valid topology file found; skipping torset parsing"
          fi
          
          echo "Torset discovery completed successfully"
      - name: init-labeler
        image: mcr.microsoft.com/oss/kubernetes/kubectl:v1.26.3
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: host-data
          mountPath: /var/lib/hyperv/.kvp_pool_3
        - name: workdir
          mountPath: /work
        command: ["/bin/sh", "-c"] 
        args:
          - |
            for kv in $(cat /var/lib/hyperv/.kvp_pool_3 | sed 's/\x0/ /g;s/  */ /g' | sed -E 's/([^ ]+) ([^ ]+)/\1=\2\n/g; s/ ([^ ]+)$/=\1/'); do
              echo "$kv"
              kubectl label node "$NODE_NAME" "hyperv/$kv" --overwrite
            done

            pkey=$(cat /sys/class/infiniband/mlx5_*/ports/1/pkeys/* 2>/dev/null | grep 0x8 | sort -u)
            if [ -n "$pkey" ]; then
              kubectl label node "$NODE_NAME" "ib/pkey=$pkey" --overwrite
            fi

            if [ -s /work/torset ]; then
              torset=$(cat /work/torset)
              kubectl label node "$NODE_NAME" "ib/torset=$torset" --overwrite
            fi
      volumes:
      - name: host-data
        hostPath:
          path: /var/lib/hyperv/.kvp_pool_3
      - name: dev-infiniband
        hostPath:
          path: /dev/infiniband
      - name: workdir
        emptyDir: {}
